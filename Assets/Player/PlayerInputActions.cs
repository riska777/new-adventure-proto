//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2c2ae0f8-0562-4a49-9085-7619a271d7f9"",
            ""actions"": [
                {
                    ""name"": ""Stand"",
                    ""type"": ""Value"",
                    ""id"": ""88d56d9c-16ce-4c71-80c4-186b326d56ee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""d62a4b78-af91-4074-970b-49d271409f05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""840775bb-4073-4f0b-854d-e7fd363bf7c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TogglePrimaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""bf466cd3-9540-4aab-b719-14b4a0779d5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleSecondaryWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""19363835-b809-40ba-89b0-f02ddb57823b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aa5b6feb-5f0e-47d8-b094-156598a0a90c"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af948381-68de-4aad-8fec-4618b3e5dca2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eaa0afc6-8cf5-4ab7-addc-4c1ed2780c30"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""947fcab0-affe-4fc7-afa3-b615f487ada3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TogglePrimaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""620b7bb4-ac33-463f-adc3-d7a3225c3db7"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSecondaryWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Stand = m_Player.FindAction("Stand", throwIfNotFound: true);
        m_Player_Action = m_Player.FindAction("Action", throwIfNotFound: true);
        m_Player_Roll = m_Player.FindAction("Roll", throwIfNotFound: true);
        m_Player_TogglePrimaryWeapon = m_Player.FindAction("TogglePrimaryWeapon", throwIfNotFound: true);
        m_Player_ToggleSecondaryWeapon = m_Player.FindAction("ToggleSecondaryWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Stand;
    private readonly InputAction m_Player_Action;
    private readonly InputAction m_Player_Roll;
    private readonly InputAction m_Player_TogglePrimaryWeapon;
    private readonly InputAction m_Player_ToggleSecondaryWeapon;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Stand => m_Wrapper.m_Player_Stand;
        public InputAction @Action => m_Wrapper.m_Player_Action;
        public InputAction @Roll => m_Wrapper.m_Player_Roll;
        public InputAction @TogglePrimaryWeapon => m_Wrapper.m_Player_TogglePrimaryWeapon;
        public InputAction @ToggleSecondaryWeapon => m_Wrapper.m_Player_ToggleSecondaryWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Stand.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStand;
                @Stand.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStand;
                @Stand.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnStand;
                @Action.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAction;
                @Roll.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRoll;
                @Roll.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRoll;
                @Roll.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnRoll;
                @TogglePrimaryWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePrimaryWeapon;
                @TogglePrimaryWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePrimaryWeapon;
                @TogglePrimaryWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTogglePrimaryWeapon;
                @ToggleSecondaryWeapon.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleSecondaryWeapon;
                @ToggleSecondaryWeapon.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleSecondaryWeapon;
                @ToggleSecondaryWeapon.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnToggleSecondaryWeapon;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Stand.started += instance.OnStand;
                @Stand.performed += instance.OnStand;
                @Stand.canceled += instance.OnStand;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @TogglePrimaryWeapon.started += instance.OnTogglePrimaryWeapon;
                @TogglePrimaryWeapon.performed += instance.OnTogglePrimaryWeapon;
                @TogglePrimaryWeapon.canceled += instance.OnTogglePrimaryWeapon;
                @ToggleSecondaryWeapon.started += instance.OnToggleSecondaryWeapon;
                @ToggleSecondaryWeapon.performed += instance.OnToggleSecondaryWeapon;
                @ToggleSecondaryWeapon.canceled += instance.OnToggleSecondaryWeapon;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnStand(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnRoll(InputAction.CallbackContext context);
        void OnTogglePrimaryWeapon(InputAction.CallbackContext context);
        void OnToggleSecondaryWeapon(InputAction.CallbackContext context);
    }
}
